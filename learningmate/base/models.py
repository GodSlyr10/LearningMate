from django.db import models
from django.contrib.auth.models import AbstractUser

# Create your models here.

class User(AbstractUser):
    name=models.CharField(max_length=200,null=True)
    email=models.EmailField(null=True,unique=True)
    bio=models.TextField(null=True)
    avatar=models.ImageField(null=True,default='avatar.svg')
    USERNAME_FIELD='email'
    REQUIRED_FIELDS=[]


class Topic(models.Model):
    name=models.CharField(max_length=200)
    
    def __str__(self):
        return self.name

class Room(models.Model):
    # models have a id generated by default that is the primary key
    host=models.ForeignKey(User,on_delete=models.SET_NULL,null=True)
    topic=models.ForeignKey(Topic,on_delete=models.SET_NULL,null=True)   #if the topic is deleted then the topic for the room is set to null
    name=models.CharField(max_length=200)
    # null true means field can be left blank in the database whereas blank true means
    # field can be left empty in the form
    description=models.TextField(null=True,blank=True)
    participants=models.ManyToManyField(User,related_name='participants', blank=True)
    updated=models.DateTimeField(auto_now=True)  # updates the time stamp every time the room is updated
    created=models.DateTimeField(auto_now_add=True)  # only creates a time stamp when the room is created
    
    class Meta:
        # provides the order in which the data is provided
        ordering=['-updated','-created']
    
    def __str__(self):
        return self.name
    

class Message(models.Model):
    user=models.ForeignKey(User,on_delete=models.CASCADE)  # a single user can have multiple message but a message can have only one user  Many to one relationship
    room=models.ForeignKey(Room,on_delete=models.CASCADE)
    body=models.TextField()
    updated=models.DateTimeField(auto_now=True)  
    created=models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering=['-updated','-created']
    
    def __str__(self):
        return self.body[0:50]
    
    
    